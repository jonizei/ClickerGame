{"version":3,"sources":["Login.js","Game.js","NavBar.js","Register.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","event","preventDefault","target","name","setState","username","value","password","handleClick","onLogin","state","bind","className","type","placeholder","onChange","this","onClick","Component","Game","playerDetails","points","jwt","sessionStorage","getItem","axios","method","url","headers","Authorization","then","res","handleReward","data","catch","error","console","log","message","btnText","reward","currentPoints","msg","buttonText","requiredClicks","onLogout","NavBar","to","Register","confirmPassword","alert","App","handleLogin","handleLogout","loadPlayerDetails","loggedIn","isLoadingDetails","user","pass","post","setItem","authorization","removeItem","userRes","redirect","exact","path","component","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39430253.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Login.css';\r\n\r\n/**\r\n * This component handles the user login\r\n * \r\n * @author Joni Koskinen\r\n * @version 2020-02-26\r\n */\r\nclass Login extends Component {\r\n\r\n    /**\r\n     * Constructor of Login\r\n     * \r\n     * @param {object} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: ''\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles typing to input boxes\r\n     * \r\n     * Saves the typed text to state values\r\n     */\r\n    handleChange = event => {\r\n        event.preventDefault();\r\n\r\n        if(event.target.name === 'username') {\r\n            this.setState({username: event.target.value});\r\n        }\r\n        else if(event.target.name === 'password') {\r\n            this.setState({password: event.target.value});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls onLogin function in the properties and\r\n     * passes username and password\r\n     */\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n\r\n        this.props.onLogin(this.state.username, this.state.password);\r\n    }\r\n\r\n    /**\r\n     * Returns structure of login form\r\n     */\r\n    render() {\r\n        return(\r\n            <div className=\"form-container col-xs-12 col-sm-12 col-md-5 w-100 p-5\">\r\n                <div className=\"form-controls w-75\">\r\n                    <h1 className=\"pb-2\">Login</h1>\r\n                    <p><input className=\"form-component w-100 p-2\" type=\"text\" name=\"username\" placeholder=\"Username\" onChange={this.handleChange} /></p>\r\n                    <p><input className=\"form-component w-100 p-2\" type=\"password\" name=\"password\" placeholder=\"Password\" onChange={this.handleChange} /></p>\r\n                    <p><button className=\"form-component form-btn w-100 p-2\" onClick={this.handleClick}>Login</button></p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './Game.css';\r\n\r\n/**\r\n * This class handles the game\r\n * \r\n * @author Joni Koskinen\r\n * @version 2020-02-26\r\n */\r\nclass Game extends Component {\r\n\r\n    /**\r\n     * Constructor of Game\r\n     * \r\n     * @param {object} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleReward = this.handleReward.bind(this);\r\n\r\n        this.state = {\r\n            message: \"\",\r\n            btnText: \"Click\",\r\n            playerDetails: this.props.playerDetails\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If users has more than zero points then \r\n     * it will send POST request to a server to \r\n     * perform a button click with jwt token in the\r\n     * header.\r\n     * \r\n     * If request is a success then it will call\r\n     * handleReward() method and passes data from \r\n     * the server\r\n     * \r\n     * If user doesn't have any points then it will\r\n     * send a POST request to a server to reset the \r\n     * points\r\n     * \r\n     * If request is a success then it will reset user\r\n     * points\r\n     */\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n\r\n        if(this.state.playerDetails.points > 0) {\r\n            const jwt = sessionStorage.getItem('accessToken');\r\n\r\n            axios({\r\n                method: \"post\",\r\n                url: \"http://localhost:8080/api/click/\",\r\n                headers: {\r\n                    Authorization: jwt\r\n                }\r\n            }).then(res => {\r\n                this.handleReward(res.data);\r\n            }).catch(error => {console.log(error)});    \r\n        }\r\n        else {\r\n\r\n            const jwt = sessionStorage.getItem('accessToken');\r\n\r\n            axios({\r\n                method: \"post\",\r\n                url: \"http://localhost:8080/api/click/reset\",\r\n                headers: {\r\n                    Authorization: jwt\r\n                }\r\n            }).then(res => {\r\n                \r\n                this.setState({\r\n                    message: \"Points resetted\",\r\n                    btnText: \"Click\",\r\n                    playerDetails : res.data\r\n                });\r\n\r\n            }).catch(error => {console.log(error)});    \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add points from reward to user's points\r\n     * If reward is more than zero points it \r\n     * will notify player that he/she won a reward\r\n     * and clicks required to a next reward\r\n     * \r\n     * If reward is not more than zero then it will \r\n     * notify user that \"No reward\"\r\n     * \r\n     * If user doesn't have any points it will notify\r\n     * that no points left and suggest to press the \r\n     * button again to reset points\r\n     * \r\n     * After that it will update the values to the state\r\n     * \r\n     * @param {object} reward \r\n     */\r\n    handleReward(reward) {\r\n\r\n        let currentPoints = this.state.playerDetails.points + reward.points;\r\n        let msg = reward.points > 0 ? \"You won \" + reward.points + \" points!\" : \"No reward\";\r\n        let buttonText = \"Click\";\r\n\r\n        if(reward.requiredClicks > 0) msg += \" Clicks to next reward: \" + reward.requiredClicks;\r\n\r\n        if(currentPoints === 0) {\r\n            msg = \"You have runned out of points. Click the button to reset your points\";\r\n            buttonText = \"Reset\";\r\n        }\r\n\r\n        this.setState({\r\n            message: msg,\r\n            btnText: buttonText,\r\n            playerDetails : {\r\n                username: this.state.playerDetails.username,\r\n                points: currentPoints\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the structure of the Game form\r\n     */\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center p-2\">\r\n\r\n                    <div className=\"col-xs-12 col-sm-12 col-md-2 pb-3 w-100 h-100\">\r\n                        <button className=\"logout-btn w-100 mh-25\" onClick={this.props.onLogout}>Logout</button>\r\n                    </div>\r\n\r\n                    <div className=\"game-container form-container col-xs-12 col-sm-12 col-md-8 p-5 mw-100 mh-100\">\r\n                        <div className=\"d-sm-flex flex-md-row flex-sm-column\">\r\n                            <div>\r\n                                <button className=\"game-btn\" onClick={this.handleClick}>{this.state.btnText}</button>\r\n                            </div>\r\n\r\n                            <div className=\"flex-column pt-5 pt-sm-5 p-md-5\">\r\n                                <p className=\"game-output\">{this.state.playerDetails.username}</p>\r\n                                <p className=\"game-output\">Points: {this.state.playerDetails.points}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <p className=\"game-output text-justify\">{this.state.message}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\nimport './NavBar.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/**\r\n * This class is a navigation bar\r\n * \r\n * @author Joni Koskinen\r\n * @version 2020-02-26\r\n */\r\nclass NavBar extends Component {\r\n\r\n    /**\r\n     * Returns navigation bar structure\r\n     */\r\n    render() {\r\n        return(\r\n            <div className=\"col-sm-12 col-md-3\">\r\n                <nav className=\"navbar navbar-inverse navbar-fixed-left w-100 h-100\">\r\n                    <ul className=\"nav navbar-nav w-100 h-100 pb-3\">\r\n                        <li>\r\n                            <Link to={'/login'} className=\"nav-item w-100 mh-25 p-2\">Login</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to={'/register'} className=\"nav-item w-100 mh-25 p-2 mt-3\">Register</Link>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * This class handles user registration\r\n * \r\n * @author Joni Koskinen\r\n * @version 2020-02-26\r\n */\r\nclass Register extends Component {\r\n\r\n    /**\r\n     * Constructor of Register\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles typing to input boxes\r\n     * \r\n     * Saves the typed text to state values\r\n     */\r\n    handleChange = event => {\r\n        event.preventDefault();\r\n\r\n        if(event.target.name === 'username') {\r\n            this.setState({username: event.target.value});\r\n        }\r\n        else if(event.target.name === 'password') {\r\n            this.setState({password: event.target.value});\r\n        }\r\n        else if(event.target.name === 'confirm-password') {\r\n            this.setState({confirmPassword: event.target.value});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if passwords in state values match\r\n     * and after that it will send a POST request to \r\n     * a server with username and password as data\r\n     * \r\n     * If request is a success then it will print\r\n     * message from the server and empty the state values\r\n     * \r\n     * If passwords doesn't match it will show alert box\r\n     */\r\n    handleClick = event => {\r\n        event.preventDefault();\r\n\r\n        if(this.state.password === this.state.confirmPassword) {\r\n\r\n            axios({\r\n                method: \"post\",\r\n                url: \"http://localhost:8080/api/user/register\",\r\n                data : {\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n                }\r\n            }).then(res => {\r\n                alert(res.data);\r\n                this.setState({username: '', password: '', confirmPassword: ''});\r\n            });\r\n        } \r\n        else {\r\n            alert(\"Passwords doesn't match\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the structure of register form\r\n     */\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"form-container col-xs-12 col-sm-12 col-md-5 w-100 p-5\">\r\n                <div className=\"form-controls w-75\">\r\n                    <h1 className=\"pb-2\">Register</h1>\r\n                    <p><input className=\"form-component w-100 p-2\" type=\"text\" value={this.state.username} name=\"username\" placeholder=\"Username\" onChange={this.handleChange} /></p>\r\n                    <p><input className=\"form-component w-100 p-2\" type=\"password\" value={this.state.password}  name=\"password\" placeholder=\"Password\" onChange={this.handleChange} /></p>\r\n                    <p><input className=\"form-component w-100 p-2\" type=\"password\" value={this.state.confirmPassword} name=\"confirm-password\" placeholder=\"Confirm password\" onChange={this.handleChange} /></p>\r\n                    <p><button className=\"form-component form-btn w-100 p-2\" onClick={this.handleClick}>Register</button></p>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './Login';\nimport Game from './Game';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './NavBar';\nimport {\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\nimport Register from './Register';\n\n/**\n * This component handles the whole application\n * \n * @author Joni Koskinen\n * @version 2020-02-26\n */\nclass App extends Component {\n\n    /**\n     * Constructor of App\n     */\n    constructor() {\n      super();\n\n      this.handleLogin = this.handleLogin.bind(this);\n      this.handleLogout = this.handleLogout.bind(this);\n      this.loadPlayerDetails = this.loadPlayerDetails.bind(this);\n      \n      this.state = {\n        loggedIn: false,\n        isLoadingDetails: true,\n        playerDetails: {}\n      }\n\n    }\n\n    /**\n     * If jwt token exists in the session storage then\n     * load player details from a server and sets status to \"logged in\"\n     */\n    componentDidMount() {\n\n      const jwt = sessionStorage.getItem('accessToken');\n\n      if(jwt) {\n        this.loadPlayerDetails();\n        this.setState({loggedIn: true});\n      }\n\n    }\n\n    /**\n     * Sends post request to a server with username and password\n     * as data.\n     * \n     * If request is a success then it will save jwt token to the \n     * session storage and sets status to \"logged in\"\n     * Then calls loadPlayerDetails() method\n     * \n     * @param {string} user \n     * @param {string} pass \n     */\n    handleLogin(user, pass) {\n\n      axios.post(\"http://localhost:8080/login\", {\n        username: user,\n        password: pass\n      }).then(res => {\n        sessionStorage.setItem('accessToken', res.headers.authorization);\n        this.setState({loggedIn: true, isLoadingDetails: true}, this.loadPlayerDetails);\n      }).catch(error => {console.log(error)});\n    }\n\n    handleLogout() {\n      this.setState({loggedIn: false, playerDetails: {}}, () => {\n        sessionStorage.removeItem('accessToken');\n      });\n    }\n\n    /**\n     * Sends GET request to a server with jwt token in the header \n     * \n     * If request is a success then it will save playerDetails that server sent to\n     * the component state variable.\n     * \n     */\n    loadPlayerDetails() {\n      const jwt = sessionStorage.getItem('accessToken');\n\n      axios({\n        method: \"get\",\n        url: \"http://localhost:8080/api/user/details\",\n        headers: {\n          Authorization: jwt\n        }\n      }).then(userRes => {\n        this.setState({playerDetails: userRes.data, isLoadingDetails: false});\n      });\n    }\n\n    /**\n     * If user is not logged in it will show login and register pages\n     * if user is logged in then it will show game page\n     */\n    render() {\n\n      const redirect = () => <Redirect to=\"/\" />;\n      \n      if(!this.state.loggedIn) {\n\n        return(\n          <div className=\"d-flex align-items-center min-vh-100\">\n            <div className=\"container\">\n              <div className=\"row\">\n\n                  <NavBar />\n  \n                  <Switch>\n                    <Route exact path=\"/\">\n                      <Login onLogin={this.handleLogin} />\n                    </Route>\n                    <Route path=\"/login\">\n                      <Login onLogin={this.handleLogin} />\n                    </Route>\n                    <Route path=\"/register\">\n                      <Register />\n                    </Route>\n                    <Route component={redirect} />\n                  </Switch>\n  \n              </div>\n            </div>\n          </div>\n        );\n\n      }\n\n      if(!this.state.isLoadingDetails) {\n        return(\n            <Switch>\n              <Route exact path=\"/\">\n                <div className=\"d-flex align-items-center min-vh-100\">\n                  <Game playerDetails={this.state.playerDetails} onLogout={this.handleLogout} />\n                </div>\n              </Route>\n              <Route component={redirect} />\n            </Switch>\n        );\n      }\n      else {\n        return(\n          <p>Loading...</p>\n        );\n      }    \n      \n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst app = (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}